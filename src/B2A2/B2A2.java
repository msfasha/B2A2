/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package B2A2;

import DB.DAC.DACDefTag;
import DB.DAC.DACSentence;
import DB.DefTag;
import DB.Sentence;
import DataProcessing.UploadTextFileIntoDB;
import Utility.EnumRecordMovementDirection;
import Utility.Globals;
import java.awt.Font;
import java.awt.datatransfer.Clipboard;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.event.CaretEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author technical.support
 */
public class B2A2 extends javax.swing.JFrame {

    DACSentence dacSentence;
    DefaultTableModel dataModelConceptsListConceptExtraction;
    DefaultTableModel dataModelConceptsListOWLAnnotation;
    DefaultTableModel dtmSentenceConcepts;

    //this array shall hold JPanels, so that we won't creaate a new one if ones is already created
    //during the dynmic build phase on form initialization
    ArrayList<javax.swing.JPanel> PanelsArray;
    //this array shall hold all JToggleButtons objects, so that we can iterate through 
    //all buttons and examine their set value, called in JToggleButtonClicked
    ArrayList<javax.swing.JToggleButton> ToggleButtonsArray;
    //this array shall hold all TadDefs records, so that we can iterate through 
    //all TagDefinition according to the tag order column, called in JToggleButtonClicked
    //to select the JToggleButtons according to tag order
    ArrayList<DefTag> DefTagArray;

    Clipboard clipBoard;

    javax.swing.JTextArea ActiveTextArea;

    public B2A2() {
        try {
            initComponents();

            //dynamically create toggle buttons from DB
            CreateTagToggleButtons();

            //reset jTreePOSTags
            jTreePOSTags.removeAll();
            jTreePOSTags.setModel(null);
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

  public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }   

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {              
                    new B2A2().setVisible(true);             
            }
        });
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneSentences = new javax.swing.JTabbedPane();
        jPanelPOSTagging = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTreePOSTags = new javax.swing.JTree();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaSentenceExpandedPOS = new javax.swing.JTextArea();
        CmdAddTreeChild = new javax.swing.JButton();
        CmdDeleteTreeChild = new javax.swing.JButton();
        CmdSave = new javax.swing.JButton();
        LblLineNumber = new javax.swing.JLabel();
        CmdRevert = new javax.swing.JButton();
        LblSInfo = new javax.swing.JLabel();
        jPanelParseTrees = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextCorrectedParseTree = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextParseTree = new javax.swing.JTextArea();
        jTabbedPanePOSTags = new javax.swing.JTabbedPane();
        CMDLastSentence = new javax.swing.JButton();
        CMDNextSentence = new javax.swing.JButton();
        CMDPreviousSentence = new javax.swing.JButton();
        CMDFirstSentence = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuTools = new javax.swing.JMenu();
        jMenuItemUploadTextFileIntoDb = new javax.swing.JMenuItem();
        jMenuItemLoadTextFromDB = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();

        jPanelPOSTagging.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTreePOSTags.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTreePOSTags.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreePOSTagsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jTreePOSTags);

        jPanelPOSTagging.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 29, 400, 270));

        jTextAreaSentenceExpandedPOS.setColumns(20);
        jTextAreaSentenceExpandedPOS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextAreaSentenceExpandedPOS.setLineWrap(true);
        jTextAreaSentenceExpandedPOS.setRows(4);
        jTextAreaSentenceExpandedPOS.setWrapStyleWord(true);
        jTextAreaSentenceExpandedPOS.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaSentenceExpandedPOSCaretUpdate(evt);
            }
        });
        jScrollPane7.setViewportView(jTextAreaSentenceExpandedPOS);

        jPanelPOSTagging.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 480, 130));

        CmdAddTreeChild.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CmdAddTreeChild.setText("+");
        CmdAddTreeChild.setPreferredSize(new java.awt.Dimension(40, 20));
        CmdAddTreeChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdAddTreeChildActionPerformed(evt);
            }
        });
        jPanelPOSTagging.add(CmdAddTreeChild, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, -1, -1));

        CmdDeleteTreeChild.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CmdDeleteTreeChild.setText("-");
        CmdDeleteTreeChild.setPreferredSize(new java.awt.Dimension(40, 20));
        CmdDeleteTreeChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdDeleteTreeChildActionPerformed(evt);
            }
        });
        jPanelPOSTagging.add(CmdDeleteTreeChild, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, -1, -1));

        CmdSave.setText("Save");
        CmdSave.setPreferredSize(new java.awt.Dimension(70, 20));
        CmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdSaveActionPerformed(evt);
            }
        });
        jPanelPOSTagging.add(CmdSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, 70, 20));

        LblLineNumber.setText("POS Annotation");
        jPanelPOSTagging.add(LblLineNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 130, -1));

        CmdRevert.setText("Revert");
        CmdRevert.setPreferredSize(new java.awt.Dimension(70, 20));
        CmdRevert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdRevertActionPerformed(evt);
            }
        });
        jPanelPOSTagging.add(CmdRevert, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, 70, 20));

        LblSInfo.setText("Line Number");
        jPanelPOSTagging.add(LblSInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 350, -1));

        jTabbedPaneSentences.addTab("Expanded POS", jPanelPOSTagging);

        jLabel10.setText("Corrected Parse Tree");

        jTextCorrectedParseTree.setColumns(20);
        jTextCorrectedParseTree.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextCorrectedParseTree.setRows(5);
        jTextCorrectedParseTree.setWrapStyleWord(true);
        jScrollPane5.setViewportView(jTextCorrectedParseTree);

        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("Parse Tree");

        jTextParseTree.setEditable(false);
        jTextParseTree.setColumns(20);
        jTextParseTree.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextParseTree.setRows(5);
        jTextParseTree.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextParseTree);

        javax.swing.GroupLayout jPanelParseTreesLayout = new javax.swing.GroupLayout(jPanelParseTrees);
        jPanelParseTrees.setLayout(jPanelParseTreesLayout);
        jPanelParseTreesLayout.setHorizontalGroup(
            jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addGap(382, 382, 382))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addGap(10, 10, 10))
                    .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelParseTreesLayout.setVerticalGroup(
            jPanelParseTreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParseTreesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneSentences.addTab("Parse Trees", jPanelParseTrees);

        jTabbedPanePOSTags.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        CMDLastSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDLastSentence.setText(">>");
        CMDLastSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDLastSentenceActionPerformed(evt);
            }
        });

        CMDNextSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDNextSentence.setText(">");
        CMDNextSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDNextSentenceActionPerformed(evt);
            }
        });

        CMDPreviousSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDPreviousSentence.setText("<");
        CMDPreviousSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDPreviousSentenceActionPerformed(evt);
            }
        });

        CMDFirstSentence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CMDFirstSentence.setText("<<");
        CMDFirstSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMDFirstSentenceActionPerformed(evt);
            }
        });

        jMenuTools.setText("Tools");
        jMenuTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuToolsActionPerformed(evt);
            }
        });

        jMenuItemUploadTextFileIntoDb.setText("Upload Text Into DB");
        jMenuItemUploadTextFileIntoDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUploadTextFileIntoDbActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemUploadTextFileIntoDb);

        jMenuItemLoadTextFromDB.setText("Load Text From DB");
        jMenuItemLoadTextFromDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadTextFromDBActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemLoadTextFromDB);
        jMenuTools.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemExit);

        jMenuBar1.add(jMenuTools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPaneSentences, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPanePOSTags, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(CMDFirstSentence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(CMDPreviousSentence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(CMDNextSentence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(CMDLastSentence)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPanePOSTags, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPaneSentences, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CMDFirstSentence)
                    .addComponent(CMDPreviousSentence)
                    .addComponent(CMDNextSentence)
                    .addComponent(CMDLastSentence))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreePOSTagsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreePOSTagsValueChanged
        try {
            DefaultMutableTreeNode selectedNode
                    = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

            if (selectedNode == null) {
                return;
            }

            ResetToggleButtons();
            if (selectedNode.getLevel() > 1) {
                ToggleButtonsBasedOnSelection();
            }

        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTreePOSTagsValueChanged

    private void jTextAreaSentenceExpandedPOSCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextAreaSentenceExpandedPOSCaretUpdate
        UpdateCaret(evt);
    }//GEN-LAST:event_jTextAreaSentenceExpandedPOSCaretUpdate

    private void CmdAddTreeChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdAddTreeChildActionPerformed
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();

        DefaultMutableTreeNode selectedNode
                = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        selectedNode.add(new DefaultMutableTreeNode("(Select Toggle Bottons)"));
        model.reload(selectedNode);
    }//GEN-LAST:event_CmdAddTreeChildActionPerformed

    private void CmdDeleteTreeChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdDeleteTreeChildActionPerformed
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();

        DefaultMutableTreeNode selectedNode
                = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
        parentNode.remove(selectedNode);
        model.reload(parentNode);

        jTextAreaSentenceExpandedPOS.setText(TreeToString());
    }//GEN-LAST:event_CmdDeleteTreeChildActionPerformed

    private void CmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdSaveActionPerformed
        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
        } catch (SQLException ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CmdSaveActionPerformed

    private void CmdRevertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdRevertActionPerformed
        try {
            if (ActiveTextArea == jTextAreaSentenceExpandedPOS) {
                jTextAreaSentenceExpandedPOS.setText(dacSentence.GetCurrentRecord().getSentenceExpandedPos());
            }          
            StringToTree(dacSentence.GetCurrentRecord().getSentenceText(), dacSentence.GetCurrentRecord().getSentenceExpandedPos());
        } catch (SQLException ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CmdRevertActionPerformed

    private void jMenuItemUploadTextFileIntoDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUploadTextFileIntoDbActionPerformed
        javax.swing.JFileChooser jfc = new javax.swing.JFileChooser();
        jfc.setCurrentDirectory(new File(Globals.CorpusFilesPath));
        int returnVal = jfc.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {

            UploadTextFileIntoDB storyDBUploader = new UploadTextFileIntoDB();
            String result;
            
            result = storyDBUploader.UploadStoryTextFile(jfc.getSelectedFile().getAbsolutePath(), false);

            JOptionPane.showMessageDialog(null, result);
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItemUploadTextFileIntoDbActionPerformed

    private void jMenuItemLoadTextFromDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadTextFromDBActionPerformed
        try {
            if (dacSentence != null) {
                dacSentence.Dispose();
            }

            dacSentence = new DACSentence();
            dacSentence.InitializeRowSet();

            DisplaySentenceRecord(dacSentence.GetCurrentRecord());

            ResetToggleButtons();
        } catch (ClassNotFoundException | SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.toString());
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_jMenuItemLoadTextFromDBActionPerformed

    private void jMenuToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuToolsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuToolsActionPerformed

    private void CMDLastSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDLastSentenceActionPerformed
        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Last));
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDLastSentenceActionPerformed

    private void CMDNextSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDNextSentenceActionPerformed

        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Next));
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDNextSentenceActionPerformed

    private void CMDPreviousSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDPreviousSentenceActionPerformed

        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.Previous));
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDPreviousSentenceActionPerformed

    private void CMDFirstSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMDFirstSentenceActionPerformed
        try {
            dacSentence.SaveRecord(CaptureScreenDisplayedSentenceRecord());
            DisplaySentenceRecord(dacSentence.MoveRecord(EnumRecordMovementDirection.First));
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CMDFirstSentenceActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void CreateTagToggleButtons() throws Exception {
        try {

            //the buttons shall be ordered based on tag_order column
            DACDefTag dacDefTag = new DACDefTag();
            DefTagArray = dacDefTag.GetAllRowsArrayOrderedByTagCategoryAndShortName();

            PanelsArray = new ArrayList();
            ToggleButtonsArray = new ArrayList();
            Font font = new Font("Serif", Font.BOLD, 14);
            
            for (int i = 0; i < DefTagArray.size(); i++) {
                JToggleButton jtb = new JToggleButton(DefTagArray.get(i).getTag());

                jtb.setName(DefTagArray.get(i).getTag());
                jtb.setText(DefTagArray.get(i).getArabicDescription());
                jtb.setToolTipText(DefTagArray.get(i).getEnglishDescription()
                        + " " + DefTagArray.get(i).getArabicDescription());                
                jtb.setFont(font);
                jtb.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        ToggleButtonClicked();
                    }
                });

                PlaceTBInPanel(jtb, Globals.MyStringTrim(DefTagArray.get(i).getTagCategory()));
                ToggleButtonsArray.add(jtb);
            }

            //this array shall be used to order the sequence of buttons examination
            //this is important to insure the correct buttons are examined first
            //therefore, the resulting POS string shall be adequately ordered
            DefTagArray = dacDefTag.GetAllRowsArrayOrderedByTagOrder();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PlaceTBInPanel(javax.swing.JToggleButton paraTB, String paraPanelName) throws Exception {

        javax.swing.JPanel jPanel = FindPOSTagsPanel(paraPanelName);

        //if no panel was found then create a new one with this new TAG classification
        if (jPanel == null) {

            javax.swing.JScrollPane jScrlPane = new javax.swing.JScrollPane();
            jPanel = new javax.swing.JPanel();

            jScrlPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            jScrlPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

            jPanel.setMaximumSize(new java.awt.Dimension(500, 500));
            jPanel.setLayout(new java.awt.GridLayout(0, 3));
            jPanel.setName(paraPanelName);
            jScrlPane.setViewportView(jPanel);

            jTabbedPanePOSTags.addTab(paraPanelName, jScrlPane);
            PanelsArray.add(jPanel);
        }

        jPanel.add(paraTB);
    }

    private javax.swing.JPanel FindPOSTagsPanel(String paraPanelName) {
        javax.swing.JPanel result = null;

        for (javax.swing.JPanel jp : PanelsArray) {
            if (jp.getName().equalsIgnoreCase(paraPanelName)) {
                result = jp;
            }
        }

        return result;
    }

    private void DisplaySentenceRecord(Sentence paraSentence) throws Exception {

        LblSInfo.setText("Record Id: " + Integer.toString(paraSentence.getId())
                + " Story Id:" + Integer.toString(paraSentence.getStoryId())
                + " Line Number : " + Integer.toString(paraSentence.getLineNumber()));

        jTextAreaSentenceExpandedPOS.setText(paraSentence.getSentenceExpandedPos());        
        jTextParseTree.setText(paraSentence.getParseTree());
        jTextCorrectedParseTree.setText(paraSentence.getCorrectedParseTree());

        StringToTree(paraSentence.getSentenceText(), paraSentence.getSentenceExpandedPos());
    }

    private Sentence CaptureScreenDisplayedSentenceRecord() throws SQLException {

        Sentence sentenceRecord = new Sentence();

        //although we are capturing the read only values for clarity, these values are not
        //used during the save record phase later, they are explicitly skipped
        //this value is read only, therefore get the original value from current record
        sentenceRecord.setId(dacSentence.GetCurrentRecord().getId());
        //this value is read only, therefore get the original value from current record
        sentenceRecord.setStoryId(dacSentence.GetCurrentRecord().getStoryId());
        //this value is read only, therefore get the original value from current record
        sentenceRecord.setLineNumber(dacSentence.GetCurrentRecord().getLineNumber());
        //this value is read only, therefore get the original value from current record

        sentenceRecord.setSentenceText(dacSentence.GetCurrentRecord().getSentenceText());
        sentenceRecord.setSentenceExpandedPos(jTextAreaSentenceExpandedPOS.getText());        
        sentenceRecord.setParseTree(jTextParseTree.getText());
        sentenceRecord.setCorrectedParseTree(jTextCorrectedParseTree.getText());

        return sentenceRecord;
    }

    private void ReCreateTablesDTMModels() throws Exception {
        if (dataModelConceptsListConceptExtraction != null) {
            dataModelConceptsListConceptExtraction = null;
        }

        dataModelConceptsListConceptExtraction = new DefaultTableModel();
        dataModelConceptsListConceptExtraction.addColumn("Concept Id");
        dataModelConceptsListConceptExtraction.addColumn("Category");
        dataModelConceptsListConceptExtraction.addColumn("Arg 1 Class");
        dataModelConceptsListConceptExtraction.addColumn("Arg 2 Class");
        dataModelConceptsListConceptExtraction.addColumn("Parent Class");

        if (dataModelConceptsListOWLAnnotation != null) {
            dataModelConceptsListOWLAnnotation = null;
        }

        dataModelConceptsListOWLAnnotation = new DefaultTableModel();
        dataModelConceptsListOWLAnnotation.addColumn("Concept Id");
    } 

    public void UpdateCaret(CaretEvent evt) {
        try {
            ActiveTextArea = (javax.swing.JTextArea) evt.getSource();
            int cursorPosition = evt.getDot();

            //this code skips this procedure when run during form initialization
            if (cursorPosition == ActiveTextArea.getText().length()) {
                return;
            }

            //we need to get the tokenId under cursor
            //to do that, we shall find the beginning of the current item then extract its number
            int selectionStartPosition = -1;

            char[] charArray = ActiveTextArea.getText().toCharArray();
            for (int i = cursorPosition; i >= 0; i--) {
                if (((int) (charArray[cursorPosition - (cursorPosition - i)]) == 32)
                        || (i == 0)) {
                    if (i == 0) {
                        //Just return the current i index
                        selectionStartPosition = i;
                        break;
                    } else {
                        //if not the first token, then add 1 to compensate for the space after the token
                        //because the begining of this token shall be right after the space character
                        selectionStartPosition = i + 1;
                        break;
                    }
                }
            }

            int tokenId = Integer.valueOf(ActiveTextArea.getText().substring(selectionStartPosition, ActiveTextArea.getText().indexOf(":", selectionStartPosition)));

            //now set the Jtree to the current token id
            DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

            TreePath path = new TreePath(model.getPathToRoot(root.getChildAt(tokenId)));
            jTreePOSTags.setSelectionPath(path);
            jTreePOSTags.scrollPathToVisible(path);
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ResetToggleButtons() throws Exception {
        for (javax.swing.JToggleButton tb : ToggleButtonsArray) {
            tb.setSelected(false);
        }      
    }

    private void ToggleButtonClicked() {

        try {
            //get the current selected node - a subnode from a token node
            DefaultMutableTreeNode selectedNode
                    = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();

            if (selectedNode.getLevel() == 1) return;
            
            StringBuilder sb = new StringBuilder();

            //get current tree node
            DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();

            //iterate through all TagDefs according to the tag_order
            //then iterate through all buttons and update string based on toggle buttons state
            for (DefTag td : DefTagArray) {
                for (javax.swing.JToggleButton tb : ToggleButtonsArray) {
                    if (td.getTag().equalsIgnoreCase(tb.getName())) {
                        if (tb.isSelected()) {
                            if (sb.length() > 0) {
                                sb.append(Utility.Globals.TokenConcatinationChar);
                            }
                            sb = sb.append(tb.getName());
                        }
                    }
                }

            }

            sb.insert(0, "{");
            sb.insert(sb.length(), "}");

            selectedNode.setUserObject(sb.toString());
            model.nodeChanged(selectedNode);

            jTextAreaSentenceExpandedPOS.setText(TreeToString());

        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    private String GetItimizedTextFromJTree() {
//        String str = null;
//
//        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
//        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
//
//        Enumeration e = root.preorderEnumeration();
//        while (e.hasMoreElements()) {
//            DefaultMutableTreeNode child = (DefaultMutableTreeNode) e.nextElement();
//            str = str + child.toString() + " ";
//        }
//
//        str = str.trim();//remove the last space
//        return str;
//    }
    protected String RecursiveTreeParse(DefaultTreeModel model, Object o) {
        String str = "";
        int count = model.getChildCount(o);
        for (int i = 0; i < count; i++) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) model.getChild(o, i);
            if (model.isLeaf(child)) {
                str = str + child.toString();
            } else if (child.getLevel() == 1) {
                String s;
                s = Utility.Globals.StripNonDigits(child.toString());
                s = s + ":";

                String filler = "";//set string to empty string not null or else null will be explicitly placed in string
                if (str.length() > 0) {
                    filler = " ";
                }

                str = str + filler + s + "(" + RecursiveTreeParse(model, child) + ")";
            } else {
                str = str + child.toString() + "(" + RecursiveTreeParse(model, child) + ")";
            }
        }
        return str;
    }

    private void StringToTree(String paraSentence, String paraPOS) {
        try {
            jTreePOSTags.removeAll();
            jTreePOSTags.setModel(null);

            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Sentence");
            DefaultMutableTreeNode childNode;

            String[] wordsArray = paraSentence.split(" ");
            String[] posArray = paraPOS.split(" ");

            for (int i = 0; i < wordsArray.length; i++) {
                childNode = new DefaultMutableTreeNode(wordsArray[i]);
                root.add(childNode);

                String posTagStr = posArray[i].substring(posArray[i].indexOf(":") + 1, posArray[i].toString().length());

                Stack<DefaultMutableTreeNode> stack = new Stack<>();
                DefaultMutableTreeNode activeParentNode = childNode;

                DefaultMutableTreeNode cn = null;
                for (int ii = 0; ii < posTagStr.length(); ii++) {
                    switch (posTagStr.charAt(ii)) {
                        case 40://openning bracket (                                                        
                            if (cn != null)//not the first bracket
                            {
                                stack.push(activeParentNode);
                                activeParentNode = cn;
                            }
                            break;
                        case 41:
                            if (stack.size() > 0) {
                                activeParentNode = stack.pop();
                            }
                            break;
                        case 123:
                            cn = new DefaultMutableTreeNode("");
                            activeParentNode.add(cn);
                            cn.setUserObject(cn.getUserObject() + String.valueOf(posTagStr.charAt(ii)));
                            break;
                        default:
                            cn.setUserObject(cn.getUserObject() + String.valueOf(posTagStr.charAt(ii)));
                            break;
                    }
                }
            }

            DefaultTreeModel model = new DefaultTreeModel(root);
            jTreePOSTags.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(B2A2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String TreeToString() {
        DefaultTreeModel model = (DefaultTreeModel) jTreePOSTags.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        //enable the following sentence and disable all the other
        //if you want to experiment with recursive, but things can 
        //get complicated in tagging and annotating
        return RecursiveTreeParse(model, root);

//        String str = "";
//
//        Enumeration e = root.preorderEnumeration();
//        //this is an iterative sequential mechnisn vs recursive
//        //iterate through all nodes in the tree and build token pos taggings accordingly
//        //
//        while (e.hasMoreElements()) {
//            DefaultMutableTreeNode child = (DefaultMutableTreeNode) e.nextElement();
//            //if this is a level one token, then extract the token id
//            if (child.getLevel() == 1) {
//                String tokenId = Utility.TextStripper.StripNonDigits(child.toString());
//                String filler = "";//set string to empty string not null or else null will be explicitly placed in string
//
//                //if this token is not the first one, then there shall be a pre-string
//                //therefore, append a spacebefore the new token
//                if (str.length() > 0) {
//                    filler = " ";
//                }
//
//                str = str + filler + tokenId + ":";
//            } 
//            //if this is a token below the first level, then just add it to the resulting full string
//            else if (child.getLevel() > 1) {
//                str = str + child.toString();
//            }
//        }
//
//        return str;
    }

    private void ToggleButtonsBasedOnSelection() throws Exception {
        DefaultMutableTreeNode selectedNode
                = (DefaultMutableTreeNode) jTreePOSTags.getLastSelectedPathComponent();
        for (javax.swing.JToggleButton tb : ToggleButtonsArray) {
            if (selectedNode.toString().contains(tb.getName())) {
                tb.setSelected(true);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CMDFirstSentence;
    private javax.swing.JButton CMDLastSentence;
    private javax.swing.JButton CMDNextSentence;
    private javax.swing.JButton CMDPreviousSentence;
    private javax.swing.JButton CmdAddTreeChild;
    private javax.swing.JButton CmdDeleteTreeChild;
    private javax.swing.JButton CmdRevert;
    private javax.swing.JButton CmdSave;
    private javax.swing.JLabel LblLineNumber;
    private javax.swing.JLabel LblSInfo;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemLoadTextFromDB;
    private javax.swing.JMenuItem jMenuItemUploadTextFileIntoDb;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JPanel jPanelPOSTagging;
    private javax.swing.JPanel jPanelParseTrees;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPanePOSTags;
    private javax.swing.JTabbedPane jTabbedPaneSentences;
    private javax.swing.JTextArea jTextAreaSentenceExpandedPOS;
    private javax.swing.JTextArea jTextCorrectedParseTree;
    private javax.swing.JTextArea jTextParseTree;
    private javax.swing.JTree jTreePOSTags;
    // End of variables declaration//GEN-END:variables
}
